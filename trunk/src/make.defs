#--------------------------------------------------------------------------
# Common definitions to all internal makefiles
#
# Features (e.g., make DEBUG="YES"):
#   VERBOSE=YES     // verbose nvcc output (host symbols are always produced)
#   DEBUG=DEVICE    // produce device debugging symbols
#   MAXREG=[number] // maximum number of registers per cuda thread (default 16)
#   L1=YES          // enable using GPU L1 cache (default disabled)
# Created on: 2011-02-28
# Author: Abdullah Gharaibeh
#
#--------------------------------------------------------------------------

# Set compilation options
NVCCFLAGS =
CCFLAGS =
# 64bit edge IDs
ifeq ($(EID), 64)
  NVCCFLAGS += -DFEATURE_64BIT_EDGE_ID
  CCFLAGS += -DFEATURE_64BIT_EDGE_ID
endif

# enable verbose output
ifeq ($(VERBOSE), YES)
  NVCCFLAGS  += --ptxas-options=-v
endif
# set debugging options
ifeq ($(DEBUG), DEVICE)
  NVCCFLAGS  += -G
endif

# Maximum number of registers per cuda thread
MAXREG ?= 16

# Enable/disable GPU L1 cache
ifneq ($(L1), YES)
  NVCCFLAGS += -Xptxas -dlcm=cg
endif

# Architecture to compile for
ARCH = $(shell getconf LONG_BIT)
ifeq ($(ARCH), 32)
  ARCH =
endif

# directory definitions
CUDA_INSTALL_PATH = /usr/local/cuda
LIBDIR = $(ROOT_DIR)/lib
OBJDIR = obj

# OpenMP
OPENMP    = -fopenmp

# compilers
CC   = g++
NVCC = $(CUDA_INSTALL_PATH)/bin/nvcc

# compilation and linking flags. Note that OPTFLAGS is used only for *.c files
OPTFLAGS   = -O3 -fno-strict-aliasing
CCFLAGS   += -g $(OPENMP) $(OPTFLAGS) -Wall -Wno-format \
             -I$(CUDA_INSTALL_PATH)/include -D__STDC_LIMIT_MACROS
LFLAGS     =  -lm $(OPENMP) -lcudart -I. -L. -L$(CUDA_INSTALL_PATH)/lib$(ARCH)
NVCCFLAGS += -g -Xcompiler "$(OPENMP) -fno-strict-aliasing" -O3 -I. \
             -I$(CUDA_INSTALL_PATH)/include  -arch=sm_20 -D__STDC_LIMIT_MACROS \
             -maxrregcount=$(MAXREG)

# source files and their corresponding objects and dependencies
CCSRC   = $(wildcard *.cc)
CUSRC   = $(wildcard *.cu)
CCOBJS  = $(CCSRC:%.cc=$(OBJDIR)/%.o)
CUOBJS  = $(CUSRC:%.cu=$(OBJDIR)/%.cu_o)
CCDEPS  = $(wildcard *.h)
CUDEPS  = $(wildcard *.cuh)

# common commands across make files
ETAGS_CMD     = rm -f TAGS; find . -name '*.c' -o -name '*.h' -o \
                -name '*.cu' | xargs etags
CLEAN_CMD     = rm -f $(OBJDIR)/*.o $(OBJDIR)/*.cu_o *~
CLEAN_ALL_CMD = rm -rf $(TARGET) $(OBJDIR) *~ TAGS
